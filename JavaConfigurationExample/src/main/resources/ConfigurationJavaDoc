Open Declaration   org.springframework.context.annotation.Configuration

@Component
@Target(value={TYPE})
@Retention(value=RUNTIME)
@Documented

Indicates that a class declares one or more @Bean methods andmay be processed by the Spring container to generate bean definitions andservice requests for those beans at runtime, for example: 
 @Configuration
 public class AppConfig {

     @Bean
     public MyBean myBean() {
         // instantiate, configure and return bean ...
     }
 }

Bootstrapping @Configuration classes

Via AnnotationConfigApplicationContext

@Configuration classes are typically bootstrapped using either AnnotationConfigApplicationContext or its web-capable variant, AnnotationConfigWebApplicationContext. A simple example with the former follows: 
 AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
 ctx.register(AppConfig.class);
 ctx.refresh();
 MyBean myBean = ctx.getBean(MyBean.class);
 // use myBean ...
 

See the AnnotationConfigApplicationContext javadocs for further details, and see AnnotationConfigWebApplicationContext for web configuration instructions in a Servlet container. 

Via Spring <beans> XML

As an alternative to registering @Configuration classes directly against an AnnotationConfigApplicationContext, @Configuration classes may bedeclared as normal <bean> definitions within Spring XML files: 
 <beans>
    <context:annotation-config/>
    <bean class="com.acme.AppConfig"/>
 </beans>
 

In the example above, <context:annotation-config/> is required in order toenable ConfigurationClassPostProcessor and other annotation-relatedpost processors that facilitate handling @Configuration classes. 

Via component scanning

@Configuration is meta-annotated with @Component, therefore @Configuration classes are candidates for component scanning (typically usingSpring XML's <context:component-scan/> element) and therefore may also takeadvantage of @Autowired/@Injectlike any regular @Component. In particular, if a single constructor is presentautowiring semantics will be applied transparently for that constructor: 
 @Configuration
 public class AppConfig {

     private final SomeBean someBean;

     public AppConfig(SomeBean someBean) {
         this.someBean = someBean;
     }

     // @Bean definition using "SomeBean"

 }

@Configuration classes may not only be bootstrapped usingcomponent scanning, but may also themselves configure component scanning usingthe @ComponentScan annotation: 
 @Configuration
 @ComponentScan("com.acme.app.services")
 public class AppConfig {
     // various @Bean definitions ...
 }

See the @ComponentScan javadocs for details. 

Working with externalized values

Using the Environment API

Externalized values may be looked up by injecting the Spring org.springframework.core.env.Environment into a @Configurationclass — for example, using the @Autowired annotation: 
 @Configuration
 public class AppConfig {

     @Autowired Environment env;

     @Bean
     public MyBean myBean() {
         MyBean myBean = new MyBean();
         myBean.setName(env.getProperty("bean.name"));
         return myBean;
     }
 }

Properties resolved through the Environment reside in one or more "propertysource" objects, and @Configuration classes may contribute property sources tothe Environment object using the @PropertySourceannotation: 
 @Configuration
 @PropertySource("classpath:/com/acme/app.properties")
 public class AppConfig {

     @Inject Environment env;

     @Bean
     public MyBean myBean() {
         return new MyBean(env.getProperty("bean.name"));
     }
 }

See the Environmentand @PropertySource javadocs for further details. 

Using the @Value annotation

Externalized values may be injected into @Configuration classes usingthe @Value annotation: 
 @Configuration
 @PropertySource("classpath:/com/acme/app.properties")
 public class AppConfig {

     @Value("${bean.name}") String beanName;

     @Bean
     public MyBean myBean() {
         return new MyBean(beanName);
     }
 }

This approach is often used in conjunction with Spring's PropertySourcesPlaceholderConfigurer that can be enabled automaticallyin XML configuration via <context:property-placeholder/> or explicitlyin a @Configuration class via a dedicated static @Bean method(see "a note on BeanFactoryPostProcessor-returning @Bean methods" of @Bean's javadocs for details). Note, however, that explicit registrationof a PropertySourcesPlaceholderConfigurer via a static @Beanmethod is typically only required if you need to customize configuration such as theplaceholder syntax, etc. Specifically, if no bean post-processor (such as a PropertySourcesPlaceholderConfigurer) has registered an embedded valueresolver for the ApplicationContext, Spring will register a default embedded value resolver which resolves placeholders against property sourcesregistered in the Environment. See the section below on composing @Configuration classes with Spring XML using @ImportResource; seethe @Value javadocs; and see the @Bean javadocs for detailson working with BeanFactoryPostProcessor types such as PropertySourcesPlaceholderConfigurer. 

Composing @Configuration classes

With the @Import annotation

@Configuration classes may be composed using the @Import annotation,similar to the way that <import> works in Spring XML. Because @Configuration objects are managed as Spring beans within the container,imported configurations may be injected — for example, via constructor injection: 
 @Configuration
 public class DatabaseConfig {

     @Bean
     public DataSource dataSource() {
         // instantiate, configure and return DataSource
     }
 }

 @Configuration
 @Import(DatabaseConfig.class)
 public class AppConfig {

     private final DatabaseConfig dataConfig;

     public AppConfig(DatabaseConfig dataConfig) {
         this.dataConfig = dataConfig;
     }

     @Bean
     public MyBean myBean() {
         // reference the dataSource() bean method
         return new MyBean(dataConfig.dataSource());
     }
 }

Now both AppConfig and the imported DatabaseConfig can be bootstrappedby registering only AppConfig against the Spring context: 
 new AnnotationConfigApplicationContext(AppConfig.class);

With the @Profile annotation

@Configuration classes may be marked with the @Profile annotation toindicate they should be processed only if a given profile or profiles are active: 
 @Profile("development")
 @Configuration
 public class EmbeddedDatabaseConfig {

     @Bean
     public DataSource dataSource() {
         // instantiate, configure and return embedded DataSource
     }
 }

 @Profile("production")
 @Configuration
 public class ProductionDatabaseConfig {

     @Bean
     public DataSource dataSource() {
         // instantiate, configure and return production DataSource
     }
 }

Alternatively, you may also declare profile conditions at the @Bean method level — for example, for alternative bean variants within the same configuration class: 
 @Configuration
 public class ProfileDatabaseConfig {

     @Bean("dataSource")
     @Profile("development")
     public DataSource embeddedDatabase() { ... }

     @Bean("dataSource")
     @Profile("production")
     public DataSource productionDatabase() { ... }
 }

See the @Profile and org.springframework.core.env.Environmentjavadocs for further details. 

With Spring XML using the @ImportResource annotation

As mentioned above, @Configuration classes may be declared as regular Spring <bean> definitions within Spring XML files. It is also possible toimport Spring XML configuration files into @Configuration classes usingthe @ImportResource annotation. Bean definitions imported fromXML can be injected — for example, using the @Inject annotation: 
 @Configuration
 @ImportResource("classpath:/com/acme/database-config.xml")
 public class AppConfig {

     @Inject DataSource dataSource; // from XML

     @Bean
     public MyBean myBean() {
         // inject the XML-defined dataSource bean
         return new MyBean(this.dataSource);
     }
 }

With nested @Configuration classes

@Configuration classes may be nested within one another as follows: 
 @Configuration
 public class AppConfig {

     @Inject DataSource dataSource;

     @Bean
     public MyBean myBean() {
         return new MyBean(dataSource);
     }

     @Configuration
     static class DatabaseConfig {
         @Bean
         DataSource dataSource() {
             return new EmbeddedDatabaseBuilder().build();
         }
     }
 }

When bootstrapping such an arrangement, only AppConfig need be registeredagainst the application context. By virtue of being a nested @Configurationclass, DatabaseConfig will be registered automatically. This avoidsthe need to use an @Import annotation when the relationship between AppConfig and DatabaseConfig is already implicitly clear. 

Note also that nested @Configuration classes can be used to good effectwith the @Profile annotation to provide two options of the same bean to theenclosing @Configuration class. 

Configuring lazy initialization

By default, @Bean methods will be eagerly instantiated at containerbootstrap time. To avoid this, @Configuration may be used in conjunction withthe @Lazy annotation to indicate that all @Bean methods declared withinthe class are by default lazily initialized. Note that @Lazy may be used onindividual @Bean methods as well. 

Testing support for @Configuration classes

The Spring TestContext framework available in the spring-test moduleprovides the @ContextConfiguration annotation which can accept an array of @Configuration Class objects: 
 @RunWith(SpringRunner.class)
 @ContextConfiguration(classes = {AppConfig.class, DatabaseConfig.class})
 public class MyTests {

     @Autowired MyBean myBean;

     @Autowired DataSource dataSource;

     @Test
     public void test() {
         // assertions against myBean ...
     }
 }

See the TestContext frameworkreference documentation for details. 

Enabling built-in Spring features using @Enable annotations

Spring features such as asynchronous method execution, scheduled task execution,annotation driven transaction management, and even Spring MVC can be enabled andconfigured from @Configuration classes using their respective "@Enable"annotations. See @EnableAsync, @EnableScheduling, @EnableTransactionManagement, @EnableAspectJAutoProxy,and @EnableWebMvcfor details. 

Constraints when authoring @Configuration classes
•Configuration classes must be provided as classes (i.e. not as instances returnedfrom factory methods), allowing for runtime enhancements through a generated subclass. 
•Configuration classes must be non-final. 
•Configuration classes must be non-local (i.e. may not be declared within a method). 
•Any nested configuration classes must be declared as static. 
•@Bean methods may not in turn create further configuration classes(any such instances will be treated as regular beans, with their configurationannotations remaining undetected). 
Since:3.0Author:Rod JohnsonChris BeamsSee Also:BeanProfileImportImportResourceComponentScanLazyPropertySourceAnnotationConfigApplicationContextConfigurationClassPostProcessororg.springframework.core.env.Environmentorg.springframework.test.context.ContextConfiguration